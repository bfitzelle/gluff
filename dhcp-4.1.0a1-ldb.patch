diff -ruN dhcp-4.1.0a1/configure dhcp-4.1.0a1-hl/configure
--- dhcp-4.1.0a1/configure	2008-01-24 03:20:37.000000000 +0100
+++ dhcp-4.1.0a1-hl/configure	2008-08-14 09:48:26.000000000 +0200
@@ -5674,6 +5674,91 @@
 fi
 
 
+# find an sqlite3 library
+{ echo "$as_me:$LINENO: checking for library containing sqlite3_open" >&5
+echo $ECHO_N "checking for library containing sqlite3_open... $ECHO_C" >&6; }
+if test "${ac_cv_search_sqlite3_open+set}" = set; then
+  echo $ECHO_N "(cached) $ECHO_C" >&6
+else
+  ac_func_search_save_LIBS=$LIBS
+cat >conftest.$ac_ext <<_ACEOF
+/* confdefs.h.  */
+_ACEOF
+cat confdefs.h >>conftest.$ac_ext
+cat >>conftest.$ac_ext <<_ACEOF
+/* end confdefs.h.  */
+
+/* Override any GCC internal prototype to avoid an error.
+   Use char because int might match the return type of a GCC
+   builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+char sqlite3_open ();
+int
+main ()
+{
+return sqlite3_open ();
+  ;
+  return 0;
+}
+_ACEOF
+for ac_lib in '' sqlite3; do
+  if test -z "$ac_lib"; then
+    ac_res="none required"
+  else
+    ac_res=-l$ac_lib
+    LIBS="-l$ac_lib  $ac_func_search_save_LIBS"
+  fi
+  rm -f conftest.$ac_objext conftest$ac_exeext
+if { (ac_try="$ac_link"
+case "(($ac_try" in
+  *\"* | *\`* | *\\*) ac_try_echo=\$ac_try;;
+  *) ac_try_echo=$ac_try;;
+esac
+eval "echo \"\$as_me:$LINENO: $ac_try_echo\"") >&5
+  (eval "$ac_link") 2>conftest.er1
+  ac_status=$?
+  grep -v '^ *+' conftest.er1 >conftest.err
+  rm -f conftest.er1
+  cat conftest.err >&5
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); } && {
+	 test -z "$ac_c_werror_flag" ||
+	 test ! -s conftest.err
+       } && test -s conftest$ac_exeext &&
+       $as_test_x conftest$ac_exeext; then
+  ac_cv_search_sqlite3_open=$ac_res
+else
+  echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+
+fi
+
+rm -f core conftest.err conftest.$ac_objext conftest_ipa8_conftest.oo \
+      conftest$ac_exeext
+  if test "${ac_cv_search_sqlite3_open+set}" = set; then
+  break
+fi
+done
+if test "${ac_cv_search_sqlite3_open+set}" = set; then
+  :
+else
+  ac_cv_search_sqlite3_open=no
+fi
+rm conftest.$ac_ext
+LIBS=$ac_func_search_save_LIBS
+fi
+{ echo "$as_me:$LINENO: result: $ac_cv_search_sqlite3_open" >&5
+echo "${ECHO_T}$ac_cv_search_sqlite3_open" >&6; }
+ac_res=$ac_cv_search_sqlite3_open
+if test "$ac_res" != no; then
+  test "$ac_res" = "none required" || LIBS="$ac_res $LIBS"
+
+fi
+
+
 # Solaris needs some libraries for functions
 { echo "$as_me:$LINENO: checking for library containing socket" >&5
 echo $ECHO_N "checking for library containing socket... $ECHO_C" >&6; }
@@ -8047,21 +8132,22 @@
   fi
   rm -f "$tmp/out12"
 # Compute $ac_file's index in $config_headers.
+_am_arg=$ac_file
 _am_stamp_count=1
 for _am_header in $config_headers :; do
   case $_am_header in
-    $ac_file | $ac_file:* )
+    $_am_arg | $_am_arg:* )
       break ;;
     * )
       _am_stamp_count=`expr $_am_stamp_count + 1` ;;
   esac
 done
-echo "timestamp for $ac_file" >`$as_dirname -- $ac_file ||
-$as_expr X$ac_file : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
-	 X$ac_file : 'X\(//\)[^/]' \| \
-	 X$ac_file : 'X\(//\)$' \| \
-	 X$ac_file : 'X\(/\)' \| . 2>/dev/null ||
-echo X$ac_file |
+echo "timestamp for $_am_arg" >`$as_dirname -- "$_am_arg" ||
+$as_expr X"$_am_arg" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
+	 X"$_am_arg" : 'X\(//\)[^/]' \| \
+	 X"$_am_arg" : 'X\(//\)$' \| \
+	 X"$_am_arg" : 'X\(/\)' \| . 2>/dev/null ||
+echo X"$_am_arg" |
     sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
 	    s//\1/
 	    q
@@ -8098,7 +8184,7 @@
   # each Makefile.in and add a new line on top of each file to say so.
   # Grep'ing the whole file is not good either: AIX grep has a line
   # limit of 2048, but all sed's we know have understand at least 4000.
-  if sed 10q "$mf" | grep '^#.*generated by automake' > /dev/null 2>&1; then
+  if sed -n 's,^#.*generated by automake.*,X,p' "$mf" | grep X >/dev/null 2>&1; then
     dirpart=`$as_dirname -- "$mf" ||
 $as_expr X"$mf" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
 	 X"$mf" : 'X\(//\)[^/]' \| \
diff -ruN dhcp-4.1.0a1/configure.ac dhcp-4.1.0a1-hl/configure.ac
--- dhcp-4.1.0a1/configure.ac	2008-01-24 03:14:32.000000000 +0100
+++ dhcp-4.1.0a1-hl/configure.ac	2008-08-14 09:48:26.000000000 +0200
@@ -224,6 +224,9 @@
 AC_SEARCH_LIBS(MD5_Init, [crypto])
 AC_SEARCH_LIBS(MD5Init, [crypto])
 
+# find an sqlite3 library
+AC_SEARCH_LIBS(sqlite3_open, [sqlite3])
+
 # Solaris needs some libraries for functions
 AC_SEARCH_LIBS(socket, [socket])
 AC_SEARCH_LIBS(inet_ntoa, [nsl])
diff -ruN dhcp-4.1.0a1/includes/dhcpd.h dhcp-4.1.0a1-hl/includes/dhcpd.h
--- dhcp-4.1.0a1/includes/dhcpd.h	2008-01-24 03:43:05.000000000 +0100
+++ dhcp-4.1.0a1-hl/includes/dhcpd.h	2008-08-14 09:48:26.000000000 +0200
@@ -1667,6 +1667,7 @@
 
 extern const char *path_dhcpd_conf;
 extern const char *path_dhcpd_db;
+extern const char *path_dhcpd_ldb;
 extern const char *path_dhcpd_pid;
 
 extern int dhcp_max_agent_option_packet_length;
@@ -3363,4 +3364,3 @@
 
 void mark_hosts_unavailable(void);
 void mark_interfaces_unavailable(void);
-
diff -ruN dhcp-4.1.0a1/server/dhcp.c dhcp-4.1.0a1-hl/server/dhcp.c
--- dhcp-4.1.0a1/server/dhcp.c	2008-01-28 19:21:06.000000000 +0100
+++ dhcp-4.1.0a1-hl/server/dhcp.c	2008-08-14 11:35:38.000000000 +0200
@@ -35,6 +35,7 @@
 #include "dhcpd.h"
 #include <errno.h>
 #include <limits.h>
+#include <sqlite3.h>
 
 int outstanding_pings;
 
@@ -47,6 +48,10 @@
 static char dhcp_message [256];
 static int site_code_min;
 
+static int ldb_idx=1;
+static int ldb_lasttime=0;
+static sqlite3 *ldb=NULL;
+
 static int find_min_site_code(struct universe *);
 static isc_result_t lowest_site_code(const void *, unsigned, void *);
 
@@ -793,9 +798,96 @@
 
 	/* If we found a lease, release it. */
 	if (lease && lease -> ends > cur_time) {
+	  
+		if (path_dhcpd_ldb && ldb != NULL) {
+			int ok=1, r;
+			struct sqlite3_stmt* ldb_query;
+			struct option_cache *ridopt = NULL, *cidopt = NULL;
+			
+			if (lease -> starts != ldb_lasttime) {
+				ldb_lasttime = lease -> starts;
+				ldb_idx = 1;
+			}
+			
+			if (lease -> agent_options) {
+				struct option_cache *oc;
+				pair p;
+				
+				for (p = lease -> agent_options -> first; p; p = p -> cdr) {
+					oc = (struct option_cache *)p -> car;
+					if (oc -> data.len) {
+						if (!strcasecmp(oc -> option -> name, "circuit-id")) cidopt = oc;
+						else if (!strcasecmp(oc -> option -> name, "remote-id")) ridopt = oc;
+					}
+				}
+			}
+		
+			if (ok && (sqlite3_prepare(ldb,
+						   "INSERT INTO lease_queue (start, rtype, idx, claimed, end, ip, hw, cid, rid) values (?,1,?,?,?,?,?,?,?)",
+						   -1, &ldb_query, NULL) != SQLITE_OK ||
+				   sqlite3_bind_int(ldb_query, 1, lease -> starts) != SQLITE_OK ||
+				   sqlite3_bind_int(ldb_query, 2, ldb_idx++) != SQLITE_OK ||
+				   sqlite3_bind_int(ldb_query, 3, 0) != SQLITE_OK ||
+				   sqlite3_bind_int(ldb_query, 4, time(NULL)) != SQLITE_OK || 
+				   sqlite3_bind_text(ldb_query, 5, piaddr (lease -> ip_addr), -1, SQLITE_TRANSIENT) != SQLITE_OK ||
+				   sqlite3_bind_text(ldb_query, 6, (lease -> hardware_addr.hlen
+								    ? print_hw_addr (lease -> hardware_addr.hbuf [0],
+										     lease -> hardware_addr.hlen - 1,
+										     &lease -> hardware_addr.hbuf [1])
+								    : print_hex_1(lease->uid_len, lease->uid, 60)),
+						     -1, SQLITE_TRANSIENT) != SQLITE_OK)) {
+				ok = 0;
+			}
+			
+			if (ok) {
+				if (cidopt) {
+					if (sqlite3_bind_text(ldb_query, 7,
+							      pretty_print_option (cidopt -> option, cidopt -> data.data,
+										   cidopt -> data.len, 1, 1),
+							      -1, SQLITE_TRANSIENT) != SQLITE_OK)
+						ok = 0;
+				} else {
+					if (sqlite3_bind_null(ldb_query, 7) != SQLITE_OK) {
+						ok = 0;
+					}
+				}
+			}
+			
+			if (ok) {
+				if (ridopt) {
+					if (sqlite3_bind_text(ldb_query, 8,
+							      pretty_print_option (ridopt -> option, ridopt -> data.data,
+										   ridopt -> data.len, 1, 1),
+							      -1, SQLITE_TRANSIENT) != SQLITE_OK)
+						ok = 0;
+				} else {
+					if (sqlite3_bind_null(ldb_query, 8) != SQLITE_OK) {
+						ok = 0;
+					}
+				}
+			}
+			
+			if (ok) while ((r=sqlite3_step(ldb_query)) == SQLITE_BUSY) {
+					usleep(1000);
+				}
+			
+			if (ok && r != SQLITE_DONE)
+				ok = 0;
+			
+			if (ok && sqlite3_finalize(ldb_query) != SQLITE_OK) {
+				ok = 0;
+			}
+			
+			if (!ok) log_error("ldb error: %s", sqlite3_errmsg(ldb));
+			
+		}
+		
 		release_lease (lease, packet);
 	} 
 	log_info ("%s", msgbuf);
+
+
+
       out:
 	if (lease)
 		lease_dereference (&lease, MDL);
@@ -3031,6 +3123,110 @@
 		   ? inet_ntoa (state -> giaddr)
 		   : state -> ip -> name));
 
+	if (state -> offer == DHCPACK && lease -> starts && lease -> ends) {
+		int ok=1, r;
+		struct sqlite3_stmt* ldb_query;
+		struct option_cache *ridopt = NULL, *cidopt = NULL;
+		
+		if (path_dhcpd_ldb && ldb == NULL) {
+			if (sqlite3_open(path_dhcpd_ldb, &ldb) != SQLITE_OK ||
+			    sqlite3_prepare(ldb, "CREATE TABLE IF NOT EXISTS lease_queue (start integer, rtype integer, idx integer, claimed integer, end integer, ip text, hw text, cid text, rid text, primary key(start, idx))",
+					    -1, &ldb_query, NULL) != SQLITE_OK) {
+				ok = 0;
+			}
+			
+			if (ok) while ((r=sqlite3_step(ldb_query)) == SQLITE_BUSY) {
+					usleep(1000);
+				}
+			
+			if (ok && r != SQLITE_DONE)
+				ok = 0;
+			
+			if (ok && sqlite3_finalize(ldb_query) != SQLITE_OK) {
+				ok = 0;
+			}
+		}
+		
+		if (ok) {
+			if (lease -> starts != ldb_lasttime) {
+				ldb_lasttime = lease -> starts;
+				ldb_idx = 1;
+			}
+			
+			if (lease -> agent_options) {
+				struct option_cache *oc;
+				pair p;
+				
+				for (p = lease -> agent_options -> first; p; p = p -> cdr) {
+					oc = (struct option_cache *)p -> car;
+					if (oc -> data.len) {
+						if (!strcasecmp(oc -> option -> name, "circuit-id")) cidopt = oc;
+						else if (!strcasecmp(oc -> option -> name, "remote-id")) ridopt = oc;
+					}
+				}
+			}
+		}
+		
+		if (ok && (sqlite3_prepare(ldb,
+					   "INSERT INTO lease_queue (start, rtype, idx, claimed, end, ip, hw, cid, rid) values (?,0,?,?,?,?,?,?,?)",
+					   -1, &ldb_query, NULL) != SQLITE_OK ||
+			   sqlite3_bind_int(ldb_query, 1, lease -> starts) != SQLITE_OK ||
+			   sqlite3_bind_int(ldb_query, 2, ldb_idx++) != SQLITE_OK ||
+			   sqlite3_bind_int(ldb_query, 3, 0) != SQLITE_OK ||
+			   sqlite3_bind_int(ldb_query, 4, lease -> ends) != SQLITE_OK || 
+			   sqlite3_bind_text(ldb_query, 5, piaddr (lease -> ip_addr), -1, SQLITE_TRANSIENT) != SQLITE_OK ||
+			   sqlite3_bind_text(ldb_query, 6, (lease -> hardware_addr.hlen
+							    ? print_hw_addr (lease -> hardware_addr.hbuf [0],
+									     lease -> hardware_addr.hlen - 1,
+									     &lease -> hardware_addr.hbuf [1])
+							    : print_hex_1(lease->uid_len, lease->uid, 60)),
+					     -1, SQLITE_TRANSIENT) != SQLITE_OK)) {
+			ok = 0;
+		}
+		
+		if (ok) {
+			if (cidopt) {
+				if (sqlite3_bind_text(ldb_query, 7,
+						      pretty_print_option (cidopt -> option, cidopt -> data.data,
+									   cidopt -> data.len, 1, 1),
+						      -1, SQLITE_TRANSIENT) != SQLITE_OK)
+					ok = 0;
+			} else {
+				if (sqlite3_bind_null(ldb_query, 7) != SQLITE_OK) {
+					ok = 0;
+				}
+			}
+		}
+		
+		if (ok) {
+			if (ridopt) {
+				if (sqlite3_bind_text(ldb_query, 8,
+						      pretty_print_option (ridopt -> option, ridopt -> data.data,
+									   ridopt -> data.len, 1, 1),
+						      -1, SQLITE_TRANSIENT) != SQLITE_OK)
+					ok = 0;
+			} else {
+				if (sqlite3_bind_null(ldb_query, 8) != SQLITE_OK) {
+					ok = 0;
+				}
+			}
+		}
+		
+		if (ok) while ((r=sqlite3_step(ldb_query)) == SQLITE_BUSY) {
+				usleep(1000);
+			}
+		
+		if (ok && r != SQLITE_DONE)
+			ok = 0;
+		
+		if (ok && sqlite3_finalize(ldb_query) != SQLITE_OK) {
+			ok = 0;
+		}
+		
+		if (!ok) log_error("ldb error: %s", sqlite3_errmsg(ldb));
+		
+	}
+	
 	/* Set up the hardware address... */
 	hto.hlen = lease -> hardware_addr.hlen;
 	memcpy (hto.hbuf, lease -> hardware_addr.hbuf, hto.hlen);
diff -ruN dhcp-4.1.0a1/server/dhcpd.c dhcp-4.1.0a1-hl/server/dhcpd.c
--- dhcp-4.1.0a1/server/dhcpd.c	2008-01-24 03:17:41.000000000 +0100
+++ dhcp-4.1.0a1-hl/server/dhcpd.c	2008-08-14 09:48:26.000000000 +0200
@@ -33,7 +33,7 @@
  */
 
 static char copyright[] =
-"Copyright 2004-2008 Internet Systems Consortium.";
+"Lease queue patch by Hans Liss (Hans@Liss.pp.se) 2008\nCopyright 2004-2008 Internet Systems Consortium.";
 static char arr [] = "All rights reserved.";
 static char message [] = "Internet Systems Consortium DHCP Server";
 static char url [] = "For info, please visit http://www.isc.org/sw/dhcp/";
@@ -149,6 +149,7 @@
 
 const char *path_dhcpd_conf = _PATH_DHCPD_CONF;
 const char *path_dhcpd_db = _PATH_DHCPD_DB;
+const char *path_dhcpd_ldb = NULL;
 const char *path_dhcpd_pid = _PATH_DHCPD_PID;
 
 int dhcp_max_agent_option_packet_length = DHCP_MTU_MAX;
@@ -219,6 +220,7 @@
 	int lose;
 	int no_dhcpd_conf = 0;
 	int no_dhcpd_db = 0;
+	int no_dhcpd_ldb = 0;
 	int no_dhcpd_pid = 0;
 #ifdef DHCPv6
 	int local_family_set = 0;
@@ -297,6 +299,11 @@
 				usage ();
 			path_dhcpd_db = argv [i];
 			no_dhcpd_db = 1;
+		} else if (!strcmp (argv [i], "-ldb")) {
+			if (++i == argc)
+				usage ();
+			path_dhcpd_ldb = argv [i];
+			no_dhcpd_ldb = 1;
 		} else if (!strcmp (argv [i], "-pf")) {
 			if (++i == argc)
 				usage ();
